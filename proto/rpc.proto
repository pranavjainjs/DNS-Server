syntax = "proto3";  

option go_package = "proto/proto";  
import "google/protobuf/empty.proto";

service ReplicaServer {
  rpc Read (ReadRequest) returns (ReadReply) {}
  rpc Write (WriteRequest) returns (WriteReply) {}
  rpc Prepare (PrepareRequest) returns (PrepareOKReply) {}
  rpc Commit (CommitRequest) returns (google.protobuf.Empty) {}
  rpc ReceiveHeartBeat (HeartBeatRequest) returns (google.protobuf.Empty) {}
  rpc StartViewChange (StartViewChangeRequest) returns (google.protobuf.Empty) {}
  rpc DoViewChange (DoViewChangeRequest) returns (google.protobuf.Empty) {}
  rpc StartView (StartViewRequest) returns (google.protobuf.Empty) {}
}

// Request for reading an entry from the DNS
message ReadRequest {
  int64 requestid = 1; // Request ID at the client
  int64 clientid = 2; // Client ID of the client
  string websitename = 3; // Name of the website
}

// Reply of the Read request
message ReadReply { 
  string value = 1; // Address of the website
  int64 viewnumber = 2; // Current view number
}

// Request foR writing an entry to the DNS
message WriteRequest {
  int64 requestid = 1; // Request ID at the client
  int64 clientid = 2; // Client ID of the client
  string websitename = 3; // Name of the website
  string address = 4; // Address of the website
}

// Reply of the Write request
message WriteReply {
  bool modified = 1; // Boolean to know whether the write has been done or not
  int64 viewnumber = 2; // Current view number
}

// Prepare Request
message PrepareRequest {
  int64 logid = 1; // Log ID given at the primary replica
  int64 requestid = 2; // Request ID from the client
  int64 clientid = 3; // Client ID of the client
  int64 viewnumber = 4; // Current view number
  string websitename = 5; // Name of the website
  string address = 6; // Address of the website
  int64 commitnumber = 7; // Commit number: The last log entry upto which needs to be committed
} 

// PrepareOK Reply from a replica to primary replica
message PrepareOKReply {
  bool received = 1; // Sends True
}

// Commit Request from primary replica to all other replicas
message CommitRequest { 
  int64 viewnumber = 1; // Current view number
  int64 commitnumber = 2; // Commit number: The last log entry upto which needs to be committed
}

// HeartBeat that contains the ID of the replica that is sending i.e the primary replica
message HeartBeatRequest {
  int64 server_id = 1; // Server id of the primary which sends the heartbeat to all the other replicas.
}

// StartViewChange Request sends its ID along with the new view number
message StartViewChangeRequest {
  int64 replicaid = 1;
  int64 viewnumber = 2;
}

// Message created to send Log entries
message LogEntry {
  int64 LogID = 1;
  int64 RequestID = 2;
  int64 ClientID = 3;
  int64 Operation = 4;
  string Key = 5;
  string Value = 6;
  bool Committed = 7;
}

// DoViewChange Request
message DoViewChangeRequest {
  int64 replicaid = 1;
  int64 viewnumber = 2;
  int64 prevviewnumber = 3;
  int64 opnumber = 4;
  int64 commitnumber = 5;
  repeated LogEntry items = 6;
  map<int64, int64> clientrequestid = 7;
  map<string, string> DNS = 8;
}

// StartView Request is sent by the new primary
// to all the other replicas
message StartViewRequest {
  int64 viewnumber = 1;
  repeated LogEntry log = 2;
  int64 opnumber = 3;
  int64 commitnumber = 4;
  map<int64, int64> clientrequestid = 5;
  map<string, string> DNS = 6;
}